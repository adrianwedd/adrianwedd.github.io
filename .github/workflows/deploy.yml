# .github/workflows/deploy.yml
name: Build & Deploy Site

on:
  push:
    branches: ['main']
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  process:
    name: Process Content
    runs-on: ubuntu-latest
    outputs:
      changed-content: ${{ steps.changed-content.outputs.any_changed }}
      pages-origin: ${{ steps.pages.outputs.origin }}
      pages-base: ${{ steps.pages.outputs.base_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46

      - name: Get changed content
        id: changed-content
        uses: tj-actions/changed-files@v46
        with:
          files: content/**

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ./${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Security Audit
        run: npm audit --audit-level=high

      - name: Lint Code
        run: npm run lint

      - name: Run Tests
        run: npm test

      - name: Lint & Validate tasks.yml
        run: |
          pip install yamllint
          yamllint tasks.yml
          node scripts/validate-tasks.mjs

      - name: Run Automation Scripts
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          BASE_URL: ${{ steps.pages.outputs.origin }}${{ steps.pages.outputs.base_path }}
        run: |
          node scripts/fetch-gh-repos.mjs
          node scripts/classify-inbox.mjs ${{ steps.changed-files.outputs.all_changed_files }}
          node scripts/build-insights.mjs ${{ steps.changed-files.outputs.all_changed_files }}
          node scripts/agent-bus.mjs

      - name: Archive workspace
        run: tar -czf workspace.tar.gz .

      - name: Upload workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: workspace.tar.gz

  indexing:
    name: Generate RSS & Search
    needs: process
    if: needs.process.outputs.changed-content == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        script: [build-search-index.mjs, build-rss.mjs]
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      - run: tar -xzf workspace.tar.gz

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ./${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Run ${{ matrix.script }}
        env:
          BASE_URL: ${{ needs.process.outputs.pages-origin }}${{ needs.process.outputs.pages-base }}
        run: node scripts/${{ matrix.script }}

      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.script }}
          path: ${{ matrix.script == 'build-rss.mjs' && 'public/rss.xml' || 'public/search-index.json' }}

  build:
    name: Build and Deploy
    needs: [process, indexing]
    runs-on: ubuntu-latest
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      - run: tar -xzf workspace.tar.gz

      - name: Download search index
        uses: actions/download-artifact@v4
        with:
          name: build-search-index.mjs
          path: .

      - name: Download RSS
        uses: actions/download-artifact@v4
        with:
          name: build-rss.mjs
          path: .

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ./${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Ensure artifact paths
        run: mkdir -p public

      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: dist
